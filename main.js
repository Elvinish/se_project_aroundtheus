!function(){"use strict";class e{constructor(e,t,r,s,i){this._name=e.name,this._link=e.link,this._id=e.id,this._isLiked=e.isLiked||!1,this._cardSelector=t,this._handlePreviewPicture=r,this._handleDeleteCardClick=s,this._handleLikeClick=i}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this._id,this)})),this._trashButton.addEventListener("click",(()=>{this._handleDeleteCardClick(this._id,this)})),this._cardImage.addEventListener("click",(()=>{this._handlePreviewPicture({name:this._name,link:this._link})}))}handleDeleteCard(){this._cardElement.remove(),this.cardElement=null}setCardLike(e){this._isLiked=e,this._handleLikeIcon()}_handleLikeIcon(){this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getView(){return this._cardElement=this._getTemplate(),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._cardImage=this._cardElement.querySelector(".card__image"),this._trashButton=this._cardElement.querySelector(".card__trash-button"),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardElement.querySelector(".card__title").textContent=this._name,this.setCardLike(this._isLiked,this._likes),this._setEventListeners(),this._cardElement}}var t=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_showInputError(e,t){const r=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),r.textContent=e.validationMessage,r.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}toggleButtonState(){if(this._hasInvalidInput())return this._submitButton.classList.add(this._inactiveButtonClass),void(this._submitButton.disabled=!0);this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_hasInvalidInput(){return!this._inputList.every((e=>e.validity.valid))}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputList.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this.toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}};class r{constructor(e){this._popupElement=document.querySelector(e)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&"keydown"===e.type&&this.close()};setEventListeners(){this.closeButton=this._popupElement.querySelector(".modal__close"),this.closeButton.addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("mousedown",(e=>{e.target.classList.contains("modal")&&this.close()}))}}class s extends r{constructor(e,t){let r=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputList=this._popupElement.querySelectorAll(".modal__input"),this._submitButton=this._popupForm.querySelector(".modal__button"),this._initialButtonText=this._submitButton.textContent,this._shouldResetBeforeSubmit=r}open(){this._shouldResetBeforeSubmit&&this._popupForm.reset(),super.open()}getForm(){return this._popupForm}_getInputValues(){return this._inputValues={},this._inputList.forEach((e=>{this._inputValues[e.name]=e.value})),this._inputValues}setInputValues(e){this._inputList.forEach((t=>{t.value=e[t.name]}))}_renderLoading(e){this._submitButton.textContent=e?"Saving...":this._initialButtonText}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._renderLoading(!0),this._handleFormSubmit({inputData:this._getInputValues(),form:this.getForm()}).finally((()=>{this._renderLoading(!1),this.close()}))}))}}const i=document.querySelector("#profile-edit-button"),n=(document.querySelector("#profile-edit-modal"),document.querySelector("#profile-add-modal"),document.querySelector(".profile__title"),document.querySelector(".profile__description"),document.querySelector("#profile-title-input"),document.querySelector("#profile-description-input"),document.forms["add-card-form"]),o=(n.querySelector(".modal__input_title"),n.querySelector(".modal__input_url"),document.forms["modal-form"],document.querySelector(".cards__list"),document.querySelector("#card-template").content.firstElementChild,document.querySelector(".profile__add-button")),a=(document.querySelector("#modal-picture-form"),document.querySelector("#modal-image"),document.querySelector("#modal-title-image"),document.querySelectorAll(".modal__close"),document.querySelector(".profile__image"),document.querySelector(".profile__edit-icon"));document.getElementById("modal-delete-card"),document.querySelector(".card__trash-button"),document.getElementById("modal-close-button"),document.getElementById("modal-confirm-delete");const l={};var d;d={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},Array.from(document.querySelectorAll(d.formSelector)).forEach((e=>{const r=new t(d,e),s=e.getAttribute("name");l[s]=r,r.enableValidation()}));const c=l["add-card-form"],h=l["edit-card-form"],u=l["edit-avatar-form"],m=new s("#profile-edit-modal",(function(e){let{inputData:t}=e;return k.updateUserInfo({name:t.name,about:t.description}).then((e=>{v.setUserInfo({name:e.name,description:e.about}),m.close()})).catch((e=>{console.error("Error updating profile:",e)}))}),!1,h),_=new s("#profile-add-modal",(function(e){let{inputData:t,form:r}=e;return k.addCard({name:t.name,link:t.link}).then((e=>{y(e),r.reset(),c.toggleButtonState(),_.close()})).catch((e=>{console.error("Error adding card:",e)}))}),c),p=new s("#avatar-edit-modal",(function(e){let{inputData:t,form:r}=e;const s=t.avatar;return k.updateAvatar(s).then((e=>{v.setUserInfo({avatar:e.avatar}),r.reset()})).catch((e=>{console.error("Failed to update avatar:",e)}))}),u),f=new class extends r{constructor(e){super(e),this._imageElement=this._popupElement.querySelector(".modal__image"),this._imageCaption=this._popupElement.querySelector("#modal-title-image")}open(e){e&&e.link&&e.name?(this._imageElement.src=e.link,this._imageElement.alt=e.name,this._imageCaption.textContent=e.name,super.open()):console.error("Incorrect cardData passed to PopupWithImage",e)}}("#modal-picture-form"),E=new class{constructor(e,t){let{renderer:r}=e;this._renderer=r,this._element=document.querySelector(t)}renderItems(e){e.forEach((e=>this._renderer(e)))}addItem(e){this._element.prepend(e)}}({items:[],renderer:y},".cards__list"),v=new class{constructor(e){let{profileName:t,jobElement:r,avatarElement:s}=e;this._profileName=document.querySelector(t),this._jobElement=document.querySelector(r),this._avatarElement=document.querySelector(s)}getUserInfo(){return{name:this._profileName.textContent,description:this._jobElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,description:r,avatar:s}=e;t&&r&&(this._profileName.textContent=t,this._jobElement.textContent=r),s&&(this._avatarElement.src=s)}}({profileName:".profile__title",jobElement:".profile__description",avatarElement:".profile__image"}),L=new class extends r{constructor(e,t){super(e),this._handleDeleteConfirm=null}setHandleConfirm(e){this._handleDeleteConfirm=e}setEventListeners(){super.setEventListeners(),this._confirmButton=this._popupElement.querySelector(".modal__button_confirm"),this._confirmButton.addEventListener("click",(()=>{this._handleDeleteConfirm(),this.close()}))}}("#modal-delete-card"),k=new class{constructor(e){this._baseUrl=e.baseUrl,this._headers=e.headers}_handleResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._handleResponse)}updateUserInfo(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then(this._handleResponse)}updateUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})}).then(this._handleResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._handleResponse)}addCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{...this._headers,"Content-Type":"application/json"},body:JSON.stringify({name:e.name,link:e.link})}).then(this._handleResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}removeLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}updateAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"49047f75-cbce-49b8-982b-1a6a5af2c35f","Content-Type":"application/json"}});function y(t){let r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"addItem";const s=new e({name:(i=t).name,link:i.link,id:i._id,isLiked:i.isLiked},"#card-template",S,b,g).getView();var i;E[r](s)}function S(e){f.open(e)}function b(e,t){L.setHandleConfirm((()=>{k.deleteCard(e).then((e=>{console.log(e.message),t.handleDeleteCard()})).catch((e=>console.error("Error deleting card:",e)))})),L.open()}function g(e,t){t._isLiked?k.removeLike(e).then((e=>{t.setCardLike(e.isLiked)})).catch((e=>console.error("Error removing like:",e))):k.addLike(e).then((e=>{t.setCardLike(e.isLiked)})).catch((e=>console.error("Error adding like:",e)))}f.setEventListeners(),m.setEventListeners(),_.setEventListeners(),L.setEventListeners(),p.setEventListeners(),k.getUserInfo().then((e=>{v.setUserInfo({name:e.name,description:e.about,avatar:e.avatar})})).catch((e=>{console.error("Error fetching user info:",e)})),k.getInitialCards().then((e=>{E.renderItems(e)})).catch((e=>{console.error("Error fetching cards:",e)})),i.addEventListener("click",(()=>{h.resetValidation();const e=v.getUserInfo();m.setInputValues({name:e.name,description:e.description}),m.open()})),o.addEventListener("click",(()=>{_.open()})),a.addEventListener("click",(()=>{p.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,